# -*- coding: utf-8 -*-
"""Untitled30.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/11uj2Ar3XvZ7awxUCF-eAMFA2DJw60UAq
"""

import streamlit as st
import openai
import os
from PIL import Image

# Set your OpenAI API key using environment variable
openai.api_key = os.getenv("OPENAI_API_KEY")

def get_part_comparison(part1, part2):
    prompt = f"""
    You are an expert in electronic and networking hardware.
    Can you compare {part1} and a {part2}?

    Please provide the following information in table form except for the final recommendation:
    - What each part is
    - Their main features
    - Whether {part2} is a suitable replacement for {part1}
    - Any differences in functionality or compatibility
    - A final recommendation
    - When rendering a final recommendation, include the phrase "these parts are suitable for substitution" if you believe they are suitable for recommendation. If the are deemed not suitable for substitution then include the phrase "these parts are not suitable for substitution". If you are not sure then don't include either of those statements include the phrase "more review is needed".   
    """

    try:
        response = openai.ChatCompletion.create(
            model="gpt-4o",
            messages=[{"role": "user", "content": prompt}],
            temperature=0.3
        )
        return response.choices[0].message.content.strip()
    except Exception as e:
        return f"Error: {e}"

def evaluate_recommendation(text):
    text = text.lower()
    if "these parts are suitable for substitution" in text and "these parts are not suitable for substitution" in text:
        return "yellow", "‚ö†Ô∏è Needs further review"
    elif "these parts are suitable for substitution" in text or "can be used as a substitute" in text:
        return "green", "‚úÖ Recommended substitute"
    elif "these parts are not suitable for substitution" in text or "cannot be used" in text:
        return "red", "‚ùå Not a valid substitute"
    else:
        return "yellow", "‚ö†Ô∏è Needs further review"

st.set_page_config(page_title="Part Number Comparator", layout="centered")

# Load and display the logo
#logo = Image.open("/Users/bsadler/Desktop/VEC app/VECLogo.jpeg") # Local host
logo = Image.open("VECLogo.jpeg") #on Azure
st.image(logo, width=150)

st.title("Part Number Substitution Checker")

with st.form("compare_form"):
    part1 = st.text_input("Enter the first part number (desired part)")
    part2 = st.text_input("Enter the second part number (potential substitute)")
    submitted = st.form_submit_button("Compare")

if submitted:
    if part1 and part2:
        with st.spinner("Analyzing part compatibility..."):
            result = get_part_comparison(part1, part2)
        st.markdown("---")
        st.subheader("Comparison Result")
        st.write(result)

        # Traffic light display
        color, message = evaluate_recommendation(result)
        if color == "green":
            st.markdown("<div style='background-color:#d4edda;padding:10px;border-radius:5px;color:#155724;font-weight:bold;'>üü¢ " + message + "</div>", unsafe_allow_html=True)
        elif color == "yellow":
            st.markdown("<div style='background-color:#fff3cd;padding:10px;border-radius:5px;color:#856404;font-weight:bold;'>üü° " + message + "</div>", unsafe_allow_html=True)
        else:
            st.markdown("<div style='background-color:#f8d7da;padding:10px;border-radius:5px;color:#721c24;font-weight:bold;'>üî¥ " + message + "</div>", unsafe_allow_html=True)
    else:
        st.error("Please enter both part numbers to compare.")